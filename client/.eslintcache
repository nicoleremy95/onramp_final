[{"/Users/nicoleremy/code/onramp_final/client/src/reportWebVitals.js":"1","/Users/nicoleremy/code/onramp_final/client/src/components/Appbar/Appbar.tsx":"2","/Users/nicoleremy/code/onramp_final/client/src/App.tsx":"3","/Users/nicoleremy/code/onramp_final/client/src/index.tsx":"4","/Users/nicoleremy/code/onramp_final/client/src/components/News/News.tsx":"5","/Users/nicoleremy/code/onramp_final/client/src/utils/API.tsx":"6","/Users/nicoleremy/code/onramp_final/client/src/components/Sup/Sup.tsx":"7","/Users/nicoleremy/code/onramp_final/client/src/components/Footer/Footer.tsx":"8","/Users/nicoleremy/code/onramp_final/client/src/pages/Home/Home.tsx":"9","/Users/nicoleremy/code/onramp_final/client/src/pages/User/User.tsx":"10","/Users/nicoleremy/code/onramp_final/client/src/components/Scroll/Scroll.tsx":"11","/Users/nicoleremy/code/onramp_final/client/src/pages/Login/Login.tsx":"12","/Users/nicoleremy/code/onramp_final/client/src/components/UserComp/UserComp.tsx":"13","/Users/nicoleremy/code/onramp_final/client/src/components/LoginForm/LoginForm.tsx":"14"},{"size":362,"mtime":1609988527135,"results":"15","hashOfConfig":"16"},{"size":8778,"mtime":1610390879110,"results":"17","hashOfConfig":"16"},{"size":1307,"mtime":1610390689253,"results":"18","hashOfConfig":"16"},{"size":530,"mtime":1610255181000,"results":"19","hashOfConfig":"16"},{"size":5560,"mtime":1610384080440,"results":"20","hashOfConfig":"16"},{"size":1649,"mtime":1610387415798,"results":"21","hashOfConfig":"16"},{"size":6562,"mtime":1610386773240,"results":"22","hashOfConfig":"16"},{"size":2706,"mtime":1610255180998,"results":"23","hashOfConfig":"16"},{"size":1436,"mtime":1610389692177,"results":"24","hashOfConfig":"16"},{"size":461,"mtime":1610390604383,"results":"25","hashOfConfig":"16"},{"size":1679,"mtime":1610255180999,"results":"26","hashOfConfig":"16"},{"size":466,"mtime":1610390714819,"results":"27","hashOfConfig":"16"},{"size":4900,"mtime":1610384231193,"results":"28","hashOfConfig":"16"},{"size":4063,"mtime":1610386895280,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"2irr3u",{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"39"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"39"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"39"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"39"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"39"},"/Users/nicoleremy/code/onramp_final/client/src/reportWebVitals.js",[],["65","66"],"/Users/nicoleremy/code/onramp_final/client/src/components/Appbar/Appbar.tsx",["67","68"],"/Users/nicoleremy/code/onramp_final/client/src/App.tsx",[],"/Users/nicoleremy/code/onramp_final/client/src/index.tsx",[],["69","70"],"/Users/nicoleremy/code/onramp_final/client/src/components/News/News.tsx",["71"],"import * as React from 'react';\nimport {useState} from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport ShareIcon from '@material-ui/icons/Share';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport EmojiEmotionsIcon from '@material-ui/icons/EmojiEmotions';\nimport Modal from '@material-ui/core/Modal';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport Fade from '@material-ui/core/Fade';\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport './news.css'\n\ninterface State {\n  message: string;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      alignItems: 'center',\n      justifyContent: 'center',\n      marginBottom: 'auto'\n    },\n    cards: {\n      marginTop: '50px',\n      marginBottom: 'auto',\n      boxShadow: theme.shadows[5],\n    },\n    textField:{\n      width: '80%',\n      marginBottom: '20px'\n    },\n    cardAction: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n    },\n    container: {\n      margin: \"5%\"\n    },\n    modal: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n    },\n    paper: {\n      backgroundColor: '#eee',\n      border: '2px solid #FFC0CB',\n      boxShadow: theme.shadows[5],\n      padding: theme.spacing(2, 4, 3),\n    },\n  })\n);\n\n  interface Props {\n    newsDB: any[]\n  }\n\n\nconsole.log (\"Function News running\");\n\nexport default function News({newsDB}: Props) : JSX.Element {\n  // console.log('newsDB', newsDB)\n  const [commentObj, setCommentObj] = useState<State>({\n    message:\"\"\n  })\n  const [open, setOpen] = React.useState(false);\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const classes = useStyles();\n\n  function inputChange(e: React.ChangeEvent<HTMLTextAreaElement>){\n    //TODO: refactor any\n    const{name,value}: any = e.target;\n    setCommentObj({...commentObj, [name]: value})\n  }\n\n  const newsArr = [];\n  for(let i = 0; i < newsDB.length; i ++){\n     newsArr.push(\n      <div className=\"news-bubble\">\n      <div className=\"news-arrow news-bottom left\"></div>\n        <Typography align=\"left\">\n            <h2 className=\"sup\">...more talK!</h2>\n        </Typography>\n         <Card \n            className={classes.cards} \n            variant=\"outlined\" \n          >\n              <CardContent>\n              <Typography \n                className=\"News-cards-category\" \n                color=\"textSecondary\" \n                gutterBottom>\n                  travel\n              </Typography>\n              <Typography \n                variant=\"h5\" \n                component=\"h2\"\n              >\n                {newsDB[i].newsData}\n              </Typography>\n              <Typography \n                variant=\"body2\" \n                component=\"p\"\n              >\n                  fred\n              </Typography>\n              </CardContent>\n              <CardActions className={classes.cardAction}>\n                <IconButton aria-label=\"add to favorites\">\n                  <FavoriteIcon />\n                </IconButton>\n                <IconButton aria-label=\"share\">\n                  <ShareIcon />\n                </IconButton>\n                <IconButton aria-label=\"share\">\n                  <EmojiEmotionsIcon onClick={handleOpen} />\n                </IconButton>\n                <Modal\n                  aria-labelledby=\"transition-modal-title\"\n                  aria-describedby=\"transition-modal-description\"\n                  className={classes.modal}\n                  open={open}\n                  onClose={handleClose}\n                  closeAfterTransition\n                  BackdropComponent={Backdrop}\n                  BackdropProps={{\n                    timeout: 500,\n                  }}\n                >\n                <Fade in={open}>\n                  <div className={classes.paper}>\n                    <Button size=\"small\">‚ù§Ô∏èÔ∏è</Button>\n                    <Button size=\"small\">üòúÔ∏è</Button>\n                    <Button size=\"small\">üòà</Button>\n                    <Button size=\"small\">üòç</Button>\n                    <Button size=\"small\">üòÇ</Button>\n                    <Button size=\"small\">üòä</Button>\n                  </div>\n                </Fade>\n              </Modal>\n              </CardActions >\n              <div\n                className=\"News-cards-comment\"\n              >\n                <TextField\n                  id=\"filled-multiline-static\"\n                  label=\"comment\"\n                  variant=\"filled\"\n                  className={classes.textField}\n                />\n              </div>\n              \n         </Card>\n         </div>\n     )\n  }\n  \n\n    return (\n      <div \n        className= {classes.root}\n      >\n         <Container>\n           <Grid container>\n             <Grid item xs={1} lg={3}></Grid>\n             <Grid item xs={10} lg={8}>\n              {newsArr.map(news =>{return news})}\n             </Grid>\n             <Grid item xs={1} lg={2}></Grid>\n           </Grid>\n         </Container>\n       </div>\n    )\n}\n\n","/Users/nicoleremy/code/onramp_final/client/src/utils/API.tsx",[],"/Users/nicoleremy/code/onramp_final/client/src/components/Sup/Sup.tsx",["72","73","74","75","76","77","78","79","80"],"import * as React from 'react';\nimport {useState} from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Icon from '@material-ui/core/Icon';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport SendIcon from '@material-ui/icons/Send';\nimport Grid from '@material-ui/core/Grid';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport NativeSelect from '@material-ui/core/NativeSelect';\nimport Container from '@material-ui/core/Container';\nimport API from '../../utils/API';\nimport { Typography } from '@material-ui/core';\nimport './sup.css'\n\ninterface State {\n    newsData: string,\n    //TODO: add in newstype in form\n    // newsType: string,\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n        // display: 'flex',\n        alignItems: 'center',\n        alignContent: 'center',\n        justifyContent: 'center',\n        marginTop:'auto',\n    },\n    input: {\n        '& > *': {\n            background: 'white',\n        },\n        width: \"100%\",\n        marginRight: '100px'\n    },\n    formControl: {\n        minWidth: \"60%\",\n    },\n    send:{\n        marginTop: '50px',\n        marginRight: \"0px\"\n    }\n  }),\n);\n\n\nexport default function Sup(){\n    const classes = useStyles();\n\n    //initialize form object state\n    const [newsObj, setNewsObj] = useState<State>({\n        newsData:\"\",\n        // newsCreator:\"\",\n        // newsType:\"\"\n    })\n\n    //TODO: add in newstype to form\n    // const [state, setState] = React.useState<{ age: string | number; name: string }>({\n    //     age: '',\n    //     name: 'hai',\n    //   });\n    \n    //TODO: add in newstype to form\n    // const handleChange = (event: React.ChangeEvent<{ name?: string; value: unknown }>) => {\n    // const name = event.target.name as keyof typeof state;\n    // setState({\n    //     ...state,\n    //     [name]: event.target.value,\n    // });\n    // };\n\n    //TODO: move to app.tsx and pass down with props \n    //input change function\n    function inputChange (e: React.ChangeEvent<HTMLTextAreaElement>) {\n        //TODO: refactor any\n        const{ name, value}: any = e.target;\n        setNewsObj({ ...newsObj,[name]: value})\n        // setIcon(true)\n    }\n\n    //TODO: move to app.tsx and pass down with props \n    // input submit function\n    function inputSubmit (e: React.FormEvent<HTMLFormElement>) : boolean { \n        e.preventDefault();        \n        API.postNews(newsObj)\n        .then(news =>{\n            console.log('news', news)\n        })\n        .catch(err =>console.log('err', err))\n        setNewsObj({\n            newsData: \"\"\n            //TODO: add in newstype to form\n            // newsType: \"\"\n        })\n        return true;\n    }\n    return(\n        <div \n            className={classes.root}\n        >\n            <Container>\n            <Grid container >\n                <Grid item xs={1} sm={1} md={3} lg={3} direction=\"column\"></Grid>\n                <Grid item xs ={10} sm={10} md={6} lg={6}>\n                <div className=\"sup-bubble\">\n                    <div className=\"sup-arrow sup-bottom right\"></div>\n                        <form \n                            // className={classes.root} \n                                noValidate \n                                autoComplete=\"on\" \n                                onClick={inputSubmit}\n                            >\n                                <Typography align=\"right\">\n                                    <h2 className=\"sup\">tell me...suP?</h2>\n                                </Typography>\n                                <TextField \n                                    id=\"outlined-basic\" \n                                    label=\"suP friend?\" \n                                    variant=\"outlined\" \n                                    multiline\n                                    rows={4}\n                                    type=\"textarea\"\n                                    name=\"newsData\"\n                                    value={newsObj.newsData}\n                                    onChange={inputChange}\n                                    className={classes.input}\n                                />\n                                <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n                                    send\n                                </Button>\n                                {/* TODO: add in newstype to form */}\n                                {/* <FormControl className={classes.formControl}>\n                                    <InputLabel htmlFor=\"age-native-simple\">Category</InputLabel>\n                                    <Select\n                                        native\n                                        value={newsObj.newsType}\n                                        name=\"newsType\"\n                                        onChange={handleChange}\n                                        inputProps={{\n                                            name: 'category',\n                                            id: 'age-native-simple',\n                                        }}\n                                        >\n                                        <option aria-label=\"None\" value=\"none\" />\n                                        <option value=\"Travel\">Travel</option>\n                                        <option value=\"Food\">Food</option>\n                                        <option value=\"Entertainment\">Entertainment</option>\n                                        <option value=\"Fashion\">Fashion</option>\n                                        <option value=\"Sports\">Sports</option>\n                                        <option value=\"Music\">Music</option>\n                                        <option value=\"Misc\">Misc</option>\n                                    </Select>\n                                </FormControl> */}\n                                            \n                        </form>\n                        </div>\n                    </Grid>                 \n                    <Grid item xs={1} sm={1} md={2} lg={2} direction=\"column\"></Grid>\n                </Grid>\n            </Container>\n        </div>\n    )\n}\n\n           \n                     ","/Users/nicoleremy/code/onramp_final/client/src/components/Footer/Footer.tsx",[],"/Users/nicoleremy/code/onramp_final/client/src/pages/Home/Home.tsx",["81"],"/Users/nicoleremy/code/onramp_final/client/src/pages/User/User.tsx",[],"/Users/nicoleremy/code/onramp_final/client/src/components/Scroll/Scroll.tsx",["82"],"import * as React from 'react';\nimport {useState, useEffect} from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\nimport IconButton from '@material-ui/core/IconButton';\nimport Container from '@material-ui/core/Container';\n\nconst useStyles = makeStyles((theme) => ({\n    toTop: {\n        zIndex: 2,\n        position: 'fixed',\n        bottom: '2vh',\n        backgroundColor: '#dcdcdc',\n        color: 'black',\n        \"&:hover, &.Mui-focusVisible\": {\n            transition: '0.3s',\n            color: '#397ba6',\n            backgroundColor: '#dcdcdc'\n        },\n        right:'5%'\n    }\n}))\n\nconst Scroll = (showBelow:any) =>{\n    const classes = useStyles();\n    const [show, setShow] = useState(showBelow ? false : true)\n\n    //event handler\n    const handleScroll = () =>{\n        if(window.pageYOffset > showBelow){\n            if(!show) setShow(true)\n        } else {\n            if(show) setShow(false)\n        }\n    }\n\n    //scroll to top of page\n    const handleClick = () =>{\n        window[`scrollTo`]({\n            top:0,\n            behavior: `smooth`\n        })\n    }\n\n    useEffect(()=>{\n        if(showBelow){\n            window.addEventListener(`scroll`, handleScroll)\n            return () => window.removeEventListener(`scroll`, handleScroll)\n        }\n    })\n\n    return(\n        <div>\n            {\n            //show &&\n                <IconButton \n                    onClick={handleClick}\n                    className={classes.toTop}\n                >\n                    <ExpandLessIcon/>\n                </IconButton>\n            }\n        </div>\n    )\n}\n\nexport default Scroll;\n\n","/Users/nicoleremy/code/onramp_final/client/src/pages/Login/Login.tsx",[],"/Users/nicoleremy/code/onramp_final/client/src/components/UserComp/UserComp.tsx",["83","84","85","86","87"],"import * as React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport {useState} from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport { Typography } from '@material-ui/core';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport SendIcon from '@material-ui/icons/Send';\nimport Select from '@material-ui/core/Select';\nimport Button from '@material-ui/core/Button';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport './UserComp.css'\n\ninterface State {\n    username: string,\n    name: string,\n    email: string,\n    password: string \n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n        // display: 'flex',\n        alignItems: 'center',\n        alignContent: 'center',\n        justifyContent: 'center',\n        marginTop:'auto',\n    },\n    input: {\n        '& > *': {\n            background: 'white',\n        },\n        width: \"100%\",\n        marginRight: '100px'\n    },\n    formControl: {\n        minWidth: \"60%\",\n    },\n    send:{\n        marginTop: '50px',\n        marginRight: \"0px\"\n    }\n  }),\n);\n\nexport default function UserComp() {\n    const classes = useStyles();\n\n    const [userObj, setUserObj] = useState<State>({\n        username:'',\n        name: '',\n        email: '',\n        password: ''\n    })\n\n    function inputChange (e: React.ChangeEvent<HTMLTextAreaElement>){\n        //TODO: refactor any\n        const{ name, value}: any = e.target;\n        setUserObj({ ...userObj,[name]: value})\n        // setIcon(true)\n    }\n\n    //TODO:\n    // input submit function\n    function inputSubmit (e: React.FormEvent<HTMLFormElement>) {\n\n    }\n\n    return (\n        <div \n            className={classes.root}\n            >\n            <Container>\n            <Grid container >\n                <Grid item xs={1} sm={1} md={3} lg={3} direction=\"column\"></Grid>\n                <Grid item xs ={10} sm={10} md={6} lg={6}>\n                <div className=\"user-bubble\">\n                    <div className=\"user-arrow user-bottom right\"></div>\n                    <form \n                    // className={classes.root} \n                        noValidate \n                        autoComplete=\"on\" \n                        onClick={inputSubmit}\n                    >\n                        <Typography align=\"right\">\n                            <h2 className=\"user\">...new account!</h2>\n                        </Typography>\n                        <TextField \n                            id=\"outlined-basic\" \n                            label=\"username\" \n                            variant=\"outlined\" \n                            type=\"textarea\"\n                            name=\"username\"\n                            value={userObj.username}\n                            onChange={inputChange}\n                            className={classes.input}\n                    \n                        />\n                        <TextField \n                            id=\"outlined-basic\" \n                            label=\"password\" \n                            variant=\"outlined\" \n                            type=\"textarea\"\n                            name=\"password\"\n                            value={userObj.password}\n                            onChange={inputChange}\n                            className={classes.input}\n                            \n                        />\n                        <TextField \n                            id=\"outlined-basic\" \n                            label=\"name\" \n                            variant=\"outlined\" \n                            type=\"textarea\"\n                            name=\"name\"\n                            value={userObj.name}\n                            onChange={inputChange}\n                            className={classes.input}\n                            \n                        />\n                        <TextField \n                            id=\"outlined-basic\" \n                            label=\"email\" \n                            variant=\"outlined\"  \n                            type=\"textarea\"                                   \n                            name=\"email\"\n                            value={userObj.email}\n                            onChange={inputChange}\n                            className={classes.input}\n                        />\n                        <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n                            create account\n                        </Button>\n                    </form>\n                </div>\n                </Grid>                 \n                <Grid item xs={1} sm={1} md={2} lg={2} direction=\"column\"></Grid>\n            </Grid>\n            </Container>\n        </div>\n    )\n}\n\n","/Users/nicoleremy/code/onramp_final/client/src/components/LoginForm/LoginForm.tsx",["88"],"import * as React from 'react';\nimport {useState} from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport TextField from '@material-ui/core/TextField';\nimport { Typography } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport API from '../../utils/API';\nimport './loginForm.css'\nimport { History } from '@material-ui/icons';\n\n\ninterface State {\n    username: string,\n    password: string\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n        // display: 'flex',\n        alignItems: 'center',\n        alignContent: 'center',\n        justifyContent: 'center',\n        marginTop:'auto',\n    },\n    input: {\n        '& > *': {\n            background: 'white',\n        },\n        width: \"100%\",\n        marginRight: '100px'\n    },\n    formControl: {\n        minWidth: \"60%\",\n    },\n    send:{\n        marginTop: '50px',\n        marginRight: \"0px\"\n    }\n  }),\n);\n\n\nexport default function Login() {\n    \n    const classes = useStyles();\n\n    //initialize form object state\n    const [loginObj, setLoginObject] = useState<State>({\n        username:\"\",\n        password:\"\"\n    })\n\n    const history = useHistory();\n\n    //TODO: move to app.tsx and pass down with props \n    //input change function\n    function inputChange (e: React.ChangeEvent<HTMLTextAreaElement>) {\n        //TODO: refactor any\n        const{ name, value}: any = e.target;\n        setLoginObject({ ...loginObj,[name]: value})\n    }\n\n    //TODO: move to app.tsx and pass down with props \n    function inputSubmit (e: React.FormEvent<HTMLFormElement>) : boolean { \n        e.preventDefault();        \n        API.login(loginObj)\n        .then(loginObj =>{\n            history.push(\"/\")\n            // console.log('loginObj', loginObj)\n        })\n        .catch(err =>console.log('err', err))\n        return true;\n    }\n    return (\n        <div \n            className={classes.root}\n        >\n        <Container>\n        <Grid container >\n            <Grid item xs={1} sm={1} md={3} lg={3} direction=\"column\"></Grid>\n            <Grid item xs ={10} sm={10} md={6} lg={6}>\n            <div className=\"login-bubble\">\n                <div className=\"login-arrow login-bottom right\"></div>\n                    <form \n                    // className={classes.root} \n                        noValidate \n                        autoComplete=\"on\" \n                        onClick={inputSubmit}\n                    >\n                        <Typography align=\"right\">\n                            <h2 className=\"login\">...login?</h2>\n                        </Typography>\n                        <TextField \n                            id=\"outlined-basic\" \n                            label=\"username\" \n                            variant=\"outlined\" \n                            type=\"textarea\"\n                            name=\"username\"\n                            value={loginObj.username}\n                            onChange={inputChange}\n                            className={classes.input}\n                        />\n                        <TextField \n                            id=\"outlined-basic\" \n                            label=\"password\" \n                            variant=\"outlined\" \n                            type=\"textarea\"\n                            name=\"password\"\n                            value={loginObj.password}\n                            onChange={inputChange}\n                            className={classes.input}\n                        />\n                        <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n                            login\n                        </Button>\n                    </form>\n                    </div>\n                </Grid>                 \n                <Grid item xs={1} sm={1} md={2} lg={2} direction=\"column\"></Grid>\n            </Grid>\n        </Container>\n    </div>\n    )\n}\n",{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","severity":1,"message":"94","line":5,"column":8,"nodeType":"95","messageId":"96","endLine":5,"endColumn":12},{"ruleId":"93","severity":1,"message":"97","line":108,"column":9,"nodeType":"95","messageId":"96","endLine":108,"endColumn":30},{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","severity":1,"message":"98","line":87,"column":12,"nodeType":"95","messageId":"96","endLine":87,"endColumn":23},{"ruleId":"93","severity":1,"message":"99","line":6,"column":8,"nodeType":"95","messageId":"96","endLine":6,"endColumn":12},{"ruleId":"93","severity":1,"message":"100","line":7,"column":8,"nodeType":"95","messageId":"96","endLine":7,"endColumn":18},{"ruleId":"93","severity":1,"message":"101","line":8,"column":8,"nodeType":"95","messageId":"96","endLine":8,"endColumn":22},{"ruleId":"93","severity":1,"message":"102","line":9,"column":8,"nodeType":"95","messageId":"96","endLine":9,"endColumn":16},{"ruleId":"93","severity":1,"message":"103","line":11,"column":8,"nodeType":"95","messageId":"96","endLine":11,"endColumn":18},{"ruleId":"93","severity":1,"message":"104","line":12,"column":8,"nodeType":"95","messageId":"96","endLine":12,"endColumn":22},{"ruleId":"93","severity":1,"message":"105","line":13,"column":8,"nodeType":"95","messageId":"96","endLine":13,"endColumn":19},{"ruleId":"93","severity":1,"message":"106","line":14,"column":8,"nodeType":"95","messageId":"96","endLine":14,"endColumn":14},{"ruleId":"93","severity":1,"message":"107","line":15,"column":8,"nodeType":"95","messageId":"96","endLine":15,"endColumn":20},{"ruleId":"93","severity":1,"message":"108","line":7,"column":8,"nodeType":"95","messageId":"96","endLine":7,"endColumn":11},{"ruleId":"93","severity":1,"message":"109","line":6,"column":8,"nodeType":"95","messageId":"96","endLine":6,"endColumn":17},{"ruleId":"93","severity":1,"message":"105","line":6,"column":8,"nodeType":"95","messageId":"96","endLine":6,"endColumn":19},{"ruleId":"93","severity":1,"message":"100","line":9,"column":8,"nodeType":"95","messageId":"96","endLine":9,"endColumn":18},{"ruleId":"93","severity":1,"message":"102","line":10,"column":8,"nodeType":"95","messageId":"96","endLine":10,"endColumn":16},{"ruleId":"93","severity":1,"message":"106","line":11,"column":8,"nodeType":"95","messageId":"96","endLine":11,"endColumn":14},{"ruleId":"93","severity":1,"message":"103","line":13,"column":8,"nodeType":"95","messageId":"96","endLine":13,"endColumn":18},{"ruleId":"93","severity":1,"message":"110","line":12,"column":10,"nodeType":"95","messageId":"96","endLine":12,"endColumn":17},"no-native-reassign",["111"],"no-negated-in-lhs",["112"],"@typescript-eslint/no-unused-vars","'Home' is defined but never used.","Identifier","unusedVar","'handleProfileMenuOpen' is assigned a value but never used.","'inputChange' is defined but never used.","'Icon' is defined but never used.","'IconButton' is defined but never used.","'InputAdornment' is defined but never used.","'SendIcon' is defined but never used.","'InputLabel' is defined but never used.","'FormHelperText' is defined but never used.","'FormControl' is defined but never used.","'Select' is defined but never used.","'NativeSelect' is defined but never used.","'App' is defined but never used.","'Container' is defined but never used.","'History' is defined but never used.","no-global-assign","no-unsafe-negation"]